/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package combineethcd;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import javax.swing.JFileChooser;

/**
 *
 * @author syc
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(160, 160, 160)
                .addComponent(jButton1)
                .addContainerGap(167, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(121, 121, 121)
                .addComponent(jButton1)
                .addContainerGap(156, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
          JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("please select file name");
        int result=chooser.showOpenDialog(this);
        String fileNameAll,fileName,fileNameHCD,fileNameETD;
        if(result==JFileChooser.APPROVE_OPTION)
            fileNameAll = chooser.getSelectedFile().getAbsolutePath();
        else
            return;
        try{
          
            BufferedReader inFile=new BufferedReader(new FileReader(new File(fileNameAll)));
            fileNameHCD=inFile.readLine();
            fileNameETD=inFile.readLine();
            inFile.close();
            //input ETD result file, scan number and ion names 
            BufferedReader pBuildFileETD =new BufferedReader(new FileReader(new File(fileNameETD)));
            
            HashMap<Integer,Integer> HCD_ETD=new LinkedHashMap<>();
            HashMap<Integer,List<String>> HCD_ETDIon=new LinkedHashMap<>();
            pBuildFileETD.readLine();
            String dataRow;
            while ((dataRow=pBuildFileETD.readLine())!=null)
            {
               System.out.println(dataRow);
               String[] temp=dataRow.split("\\t");
               System.out.println(temp.length);
               HCD_ETD.put(Integer.parseInt(temp[1]), Integer.parseInt(temp[7]));
               String[] ionNames=temp[4].split(",");
               List<String> ionList=new ArrayList<>();
               for(int i=0;i<Integer.parseInt(temp[3]);i++)
                   ionList.add(ionNames[i]);
               HCD_ETDIon.put(Integer.parseInt(temp[1]),ionList);
            }
             pBuildFileETD.close();
            //input HCD result file, scan number and ion names 
            BufferedReader pBuildFileHCD =new BufferedReader(new FileReader(new File(fileNameHCD)));
           dataRow= pBuildFileHCD.readLine();
           
            FileWriter outFileL = new FileWriter(new File(fileNameHCD+".HCD_CID_ETD.txt"));
            PrintWriter outL = new PrintWriter(outFileL);
            outL.println(dataRow);
            while ((dataRow=pBuildFileHCD.readLine())!=null)
            {
               String[] temp=dataRow.split("\\t");
               if(HCD_ETD.containsKey(Integer.parseInt(temp[1]))){
                    String[] ionNames=temp[4].split(",");
                    List<String> ionList=new ArrayList<>();
                    for(int i=0;i<Integer.parseInt(temp[3]);i++)
                       ionList.add(ionNames[i]);
                    List<String> etdList=HCD_ETDIon.get(Integer.parseInt(temp[1]));
                    for(int i=0;i<etdList.size();i++){
                        if(!ionList.contains(etdList.get(i)))
                            ionList.add(etdList.get(i));
                    }
                    temp[3]=String.valueOf(ionList.size());
                    temp[4]=ionList.get(0);
                    for(int i=1;i<ionList.size();i++)
                        temp[4]+=","+ionList.get(i);
                    String outRow=temp[0];
                    for(int i=1;i<temp.length;i++)
                        outRow=outRow+"\t"+temp[i];
                    //add etd scan number
                    outRow=outRow+"\t"+HCD_ETD.get(Integer.parseInt(temp[1]));
                    outL.println(outRow);
                   
               }
               else{
                   outL.println(dataRow);
               }

            }
            pBuildFileHCD.close();
            outL.close();
        
 
        }
        catch(FileNotFoundException e){
            System.out.println("File not found");
        }
        catch(IOException e){
            e.printStackTrace(System.out);       
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
}
